To connect to Percona Server for MongoDB you need to construct the MongoDB connection URI string. It includes the credentials of the admin user, which are stored in the [Secrets :octicons-link-external-16:](https://kubernetes.io/docs/concepts/configuration/secret/) object.

1. List the Secrets objects

    ```{.bash data-prompt="$"}
    $ {{ commandName }} get secrets -n <namespace>
    ```
    
    The Secrets object you are interested in has the
    `{{ clusterName }}-secrets` name by default.
    
2. View the Secret contents to retrive the admin user credentials.

    ```{.bash data-prompt="$"}
    $ {{ commandName }} get secret {{ clusterName }}-secrets -o yaml
    ``` 
    The command returns the YAML file with generated Secrets, including the `MONGODB_DATABASE_ADMIN_USER`
    and `MONGODB_DATABASE_ADMIN_PASSWORD` strings, which should look as follows:

    ??? example "Sample output"
        
        ```{.yaml .no-copy}
        ...
        data:
          ...
          MONGODB_DATABASE_ADMIN_PASSWORD: aDAzQ0pCY3NSWEZ2ZUIzS1I=
          MONGODB_DATABASE_ADMIN_USER: ZGF0YWJhc2VBZG1pbg==
        ```

    The actual login name and password on the output are base64-encoded. To bring it
    back to a human-readable form, run:

    ```{.bash data-prompt="$"}
    $ echo 'MONGODB_DATABASE_ADMIN_USER' | base64 --decode
    $ echo 'MONGODB_DATABASE_ADMIN_PASSWORD' | base64 --decode
    ```

3. Run a container with a MongoDB client and connect its console output to your
    terminal. The following command does this, naming the new Pod
    `percona-client`:

    ``` {.bash data-prompt="$" }
    $ {{ commandName }} run -i --rm --tty percona-client --image=percona/percona-server-mongodb:{{ mongodb70recommended }} --restart=Never -- bash -il
    ```

    Executing it may require some time to deploy the corresponding Pod.

3. Now run `mongosh` tool inside the `percona-client` command shell using the admin user credentialds you obtained from the
    Secret, and a proper namespace name instead of the `<namespace name>`
    placeholder. The command will look different depending on whether sharding
    is on (the default behavior) or off:

    === "if sharding is on"
        ``` {.bash data-prompt="$" }
        $ mongosh "mongodb://databaseAdmin:databaseAdminPassword@{{ clusterName }}-mongos.<namespace name>.svc.cluster.local/admin?ssl=false"
        ```

    === "if sharding is off"
        ``` {.bash data-prompt="$" }
        $ mongosh "mongodb+srv://databaseAdmin:databaseAdminPassword@{{ clusterName }}-rs0.<namespace name>.svc.cluster.local/admin?replicaSet=rs0&ssl=false"
        ```
        
    !!! note
    
        If you are using MongoDB versions earler than 6.x (such as
        {{ mongodb50recommended }} instead of the
        default {{ mongodb70recommended }} variant), substitute
        `mongosh` command with `mongo` in the above examples.
