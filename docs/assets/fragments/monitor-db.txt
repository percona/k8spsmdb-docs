In this section you will learn how to monitor the health of Percona Server for MongoDB with [Percona Monitoring and Management (PMM) :octicons-link-external-16:](https://docs.percona.com/percona-monitoring-and-management/3/install-pmm/install-pmm-client/connect-database/mongodb.html).

The Operator supports both PMM version 2 and PMM version 3.

It determines which PMM server version you are using based on the authentication method you provide. For PMM 2, the Operator uses API keys for authentication. For PMM 3, it uses service account tokens.

We recommend using the latest PMM 3.

PMM is a client/server application. It includes the [PMM Server :octicons-link-external-16:](https://docs.percona.com/percona-monitoring-and-management/3/reference/index.html#pmm-server) and the number of [PMM Clients :octicons-link-external-16:](https://docs.percona.com/percona-monitoring-and-management/3/reference/index.html#pmm-client) running on each node with the
database you wish to monitor.

A PMM Client collects needed metrics and sends gathered data
to the PMM Server. As a user, you connect to the PMM Server to see database metrics on a number of dashboards.

PMM Server and PMM Client are installed separately.

## Considerations

1. If you are using PMM server version 2, use a PMM client image compatible with PMM 2. If you are using PMM server version 3, use a PMM client image compatible with PMM 3. Check [Percona certified images](images.md) for the right one.
2. If you specified both authentication methods for PMM server configuration and they have non-empty values, priority goes to PMM 3. 
3. For migration from PMM2 to PMM3, see [PMM upgrade documentation :octicons-link-external-16:](https://docs.percona.com/percona-monitoring-and-management/3/pmm-upgrade/migrating_from_pmm_2.html). Also check the [Automatic migration of API keys :octicons-link-external-16:](https://docs.percona.com/percona-monitoring-and-management/3/api/authentication.html#automatic-migration-of-api-keys) page.

## Install PMM Server

You must have PMM server up and running. You can run PMM Server as a *Docker image*, a *virtual appliance*, or in Kubernetes.
Please refer to the [official PMM documentation :octicons-link-external-16:](https://docs.percona.com/percona-monitoring-and-management/3/install-pmm/install-pmm-server/index.html) for the installation instructions.

## Install PMM Client

PMM Client is installed as a side-car container in the database Pods in your Kubernetes-based environment. To install PMM Client, do the following:
{.power-number}

### Configure authentication

=== "PMM3"

    PMM3 uses service accounts to control access to PMM server components and resources. To authenticate in PMM server, you need a service account token. [Generate a service account and token :octicons-link-external-16:](https://docs.percona.com/percona-monitoring-and-management/3/api/authentication.html?h=authe#generate-a-service-account-and-token). Specify the Admin role for the service account.

    !!! warning

        When you create a service account token, you can select its lifetime: it can be either a permanent token that never expires or the one with the expiration date. PMM server cannot rotate service account tokens after they expire. So you must take care of reconfiguring PMM Client in this case.

=== "PMM2"

    [Get the PMM API key from PMM Server :octicons-link-external-16:](https://docs.percona.com/percona-monitoring-and-management/2/details/api.html#api-keys-and-authentication). The API key must have the role "Admin". You need this key to authorize PMM Client within PMM Server. 

    === ":material-view-dashboard-variant: From PMM UI" 

        [Generate the PMM API key :octicons-link-external-16:](https://docs.percona.com/percona-monitoring-and-management/2/details/api.html#api-keys-and-authentication){.md-button} 

    === ":material-console: From command line"

        You can query your PMM Server installation for the API
        Key using `curl` and `jq` utilities. Replace `<login>:<password>@<server_host>` placeholders with your real PMM Server login, password, and hostname in the following command:
        
        ``` {.bash data-prompt="$" }
        $ API_KEY=$(curl --insecure -X POST -H "Content-Type: application/json" -d '{"name":"operator", "role": "Admin"}' "https://<login>:<password>@<server_host>/graph/api/auth/keys" | jq .key)
        ```

    !!! warning

        The API key is not rotated automatically when it expired. You must manually recreate it and reconfigure the PMM Client. 

### Create a secret

Now you must pass the credentials to the Operator. To do so, create a Secret object.

1. Create a Secret configuration file. You can use the [deploy/secrets.yaml :octicons-link-external-16:](https://github.com/percona/percona-server-mongodb-operator/blob/v{{release}}/deploy/secrets.yaml) secrets file.

    === "PMM 3"
        
        Specify the service account token as the `PMM_SERVER_TOKEN` value in the secrets file:

        ```yaml
        apiVersion: v1
        kind: Secret
        metadata:
          name: my-cluster-name-secrets
        type: Opaque
        stringData:
          ....
          PMM_SERVER_TOKEN: ""
        ``` 

    === "PMM 2"

        Specify the API key as the `PMM_SERVER_API_KEY` value in the secrets file:

        ```yaml
        apiVersion: v1
        kind: Secret
        metadata:
          name: my-cluster-name-secrets
        type: Opaque
        stringData:
          ....
          PMM_SERVER_API_KEY: ""
        ``` 

2. Create the Secrets object using the `deploy/secrets.yaml` file.

    ```{.bash data-prompt="$"}
    $ kubectl apply -f deploy/secrets.yaml -n <namespace>
    ```

    ??? example "Expected output"

        ```{.text .no-copy}
        secret/my-cluster-name-secrets created
        ```

### Deploy the PMM Client

1. Update the `pmm` section in the [deploy/cr.yaml :octicons-link-external-16:](https://github.com/percona/percona-server-mongodb-operator/blob/v{{release}}/deploy/cr.yaml) file:

    * Set `pmm.enabled`=`true`.
    * Specify your PMM Server hostname / an IP address for the `pmm.serverHost` option. The PMM Server IP address should be resolvable and reachable from within your cluster.
    * Check that the name of the Secret object that you created earlier is specified in the `secrets.users` field.

     ```yaml
     secrets:
       users: my-cluster-name-secrets
     pmm:
       enabled: true
       image: percona/pmm-client:{{pmm2recommended}}
       serverHost: monitoring-service
     ``` 
     
3. Apply the changes:

    ``` {.bash data-prompt="$"}
    $ kubectl apply -f deploy/cr.yaml -n <namespace>
    ```

4. Check that corresponding Pods are not in a cycle of stopping and restarting.
    This cycle occurs if there are errors on the previous steps:

    ```{.bash data-prompt="$"}
    $ kubectl get pods -n <namespace>
    $ kubectl logs <cluster-name>-rs0-0 -c pmm-client -n <namespace>
    ```

## Check the metrics

Let's see how the collected data is visualized in PMM.
{.power-number}

1. Log in to PMM server.
2. Click :simple-mongodb: **MongoDB** from the left-hand navigation menu. You land on the **Instances Overview** page. 
3. Select your cluster from the **Clusters** drop-down menu and the desired time range on the top of the page. You should see the metrics.
4. Click :simple-mongodb: **MongoDB**  â†’  **Other dashboards** to see the list of available dashboards that allow you to drill down to the metrics you are interested in. 
